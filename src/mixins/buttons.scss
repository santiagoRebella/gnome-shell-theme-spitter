// buttons

@function _border_color ($c) { @return darken($c,25%); } // colored buttons want
                                                         // the border form the
                                                         // base color

@function _text_shadow_color ($tc:$fg_color, $bg:$bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white,1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black,$_lbg*0.8); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>90% { @return white; }
  @else if lightness($c)>80% { @return transparentize(white, 0.3); }
  @else if lightness($c)>50% { @return transparentize(white, 0.5); }
  @else if lightness($c)>40% { @return transparentize(white, 0.7); }
  @else { @return transparentize(white, 0.9); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    icon-shadow: 0 -1px $_shadow;
  }
}


@mixin button($t) { 

  @if $t==normal {
  //
  // normal button
  //
    color: $button-color;
    background-color: $button-bg;
    border-color: $button-border;
    box-shadow: inset 0 1px lighten($button-bg,10%);
    text-shadow: 0 1px darken($button-bg, 20%);
    icon-shadow: 0 1px darken($button-bg, 20%);
  }
  @if $t==focus {
  //
  // focused button
  //
    color: $button-color-focus;
    border-color: $button-border-focus;
    background-color: $button-bg-focus;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    box-shadow: inset 0 0 0 1px $button-color-focus;
  }

  @else if $t==hover {
  //
  // hover osd button
  //
    color: $button-color-hover;
    border-color: $button-border-hover;
    background-color: $button-bg-hover;
    
    box-shadow: inset 0 1px lighten($button-bg-hover,20%);
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;

  }
  @else if $t==active {
  //
  // active osd button
  //
    color: $button-color-active;
    border-color: $button-border-active;
    background-color: $button-bg-active;
    // This should be none, but it's creating some issues with borders, so to
    // workaround it for now, use inset wich goes through a different code path.
    // see https://bugzilla.gnome.org/show_bug.cgi?id=752934
    box-shadow: inset 0 0 darken($button-bg-active, 20%);
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t==insensitive {
  //
  // insensitive osd button
  //
    color: $button-color-instensitive;
    border-color: $button-border-insensitive;
    background-color: $button-bg-instensitive;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;

    @include _shadows(inset 0 1px transparentize(white,1),
                      $_blank_edge);

    text-shadow: none;
    icon-shadow: none;
  }
}

